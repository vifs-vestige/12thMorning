@page "/blogs"
@page "/blogs/{type}"
@page "/blogs/{type}/{page:int}"
@page "/blogs/{page:int}"

@inherits RefreshPage
@implements IDisposable

@inject BlogService BlogDataService

<h3>The Blogs</h3>

<BlogPaging Page="@Page" Type="@Type" Count="@count" />

<div class="@State.MovePostInClass">

    @foreach (var blog in blogs) {
        <BSRow Class="mx-auto mt-3">
            <h1>
                <a href="blog/@blog.Id/@Type">
                    @blog.Title
                </a>
            </h1>
        </BSRow>
        <BSRow Class="mx-3 d-inline">
            @((MarkupString)blog.Post)
        </BSRow>
        <small class="d-flex justify-content-end align-bottom">
            <small>
                @blog.DateAdded.ToString("dd MMMM yyyy")
            </small>
        </small>
        <hr />
    }
</div>


<BlogPaging Page="@Page" Type="@Type" Count="@count" />

@code {
    [Parameter]
    public string Type { get; set; }
    [Parameter]
    public int Page { get; set; }
    private int count;
    private List<Blog> blogs;
    private int size = 10;
    private string TypeUrl = "";

    protected override void Refresh() {
        if (Type != null)
            TypeUrl = "/" + Type;
        State.BlogType = Type;
        count = BlogDataService.GetPages(size, Type);
        blogs = BlogDataService.GetBlogPreviewList(Page, size, Type);
        base.Refresh();
    }

    protected override void OnInitialized() {
        State.OnBlog();
        State.Change += StateHasChanged;
        base.OnInitialized();
    }

    public void Dispose() {
        Type = "";
        State.BlogType = Type;
        State.OffBlog();
        State.Change -= StateHasChanged;
        //yeah don't worry about it
        try {
            StateHasChanged();
        }
        catch (Exception) { }

    }
}
