@page "/blog"
@page "/blog/{type}"

@using _12thMorning.Data
@inject BlogService BlogDataService
@inject IJSRuntime JSRuntime;

<base href="~/" />
<h3>The Blogs</h3>

@*<BSPagination>
    <BSPaginationItem>
        <BSPaginationLink href='blog/#' @onclick="PerviousPage" PaginationLinkType="PaginationLinkType.PreviousText" />
    </BSPaginationItem>
    @foreach (var x in pages) {
        <BSPaginationItem>
            <BSPaginationLink href='blog/#' @onclick="@(() => GoToPage(x))" PaginationLinkType="PaginationLinkType.Custom">@x</BSPaginationLink>
        </BSPaginationItem>
    }
    <BSPaginationItem>
        <BSPaginationLink href='blog/#' @onclick="NextPage" PaginationLinkType="PaginationLinkType.NextText" />
    </BSPaginationItem>
</BSPagination>

@foreach (var blog in blogs) {
    <h1><a href="blog/@blog.PostNumber">@blog.Title</a></h1>
    <small><small>@blog.DateAdded.ToString("dd MMMM yyyy")</small></small>
    <div>
        @((MarkupString)BlogDataService.GetPreviewPost(blog.Post))
    </div>
    <br />
}

<BSPagination Class="mb-3">
    <BSPaginationItem>
        <BSPaginationLink href='blogpost/#' @onclick="PerviousPage" PaginationLinkType="PaginationLinkType.PreviousText" />
    </BSPaginationItem>
    @foreach (var x in pages) {
        <BSPaginationItem>
            <BSPaginationLink href='blogpost/#' @onclick="@(() => GoToPage(x))" PaginationLinkType="PaginationLinkType.Custom">@x</BSPaginationLink>
        </BSPaginationItem>
    }
    <BSPaginationItem>
        <BSPaginationLink href='blogpost/#' @onclick="NextPage" PaginationLinkType="PaginationLinkType.NextText" />
    </BSPaginationItem>
</BSPagination>*@

<div class="mx-5">
<BlogSummary type="@type"/>
    </div>

@*@update(type)*@



@code {
    [Parameter]
    public string type { get; set; }
    //private List<Blog> blogs;
    //private int page = 0;
    //private int size = 5;
    //private List<int> pages = new List<int>();
    //private int count;

    protected bool update(string type) {
        //if (reload)
        //    this.StateHasChanged();
        //reload = !reload;
        return true;

    }

    //protected override async Task OnInitializedAsync() {
    //    count = BlogDataService.GetPages(size, type);
    //    for (int x = 1; x <= count; x++) {
    //        pages.Add(x);
    //    }
    //    blogs = await BlogDataService.GetBlogList(page, size, type);
    //}

    //protected async void GoToPage(int index) {
    //    page = index - 1;
    //    blogs = await BlogDataService.GetBlogList(page, size, type);
    //}

    //protected async void NextPage() {
    //    if (page != count - 1) {
    //        page++;
    //    }
    //    blogs = await BlogDataService.GetBlogList(page, size, type);
    //}

    //protected async void PerviousPage() {
    //    if (page != 0) {
    //        page--;
    //    }
    //    blogs = await BlogDataService.GetBlogList(page, size, type);
    //}

    //protected override async Task OnAfterRenderAsync(bool firstRender) {
    //    if (firstRender) {
    //        await JSRuntime.InvokeAsync<string>("PR.prettyPrint");
    //    }
    //}

}
