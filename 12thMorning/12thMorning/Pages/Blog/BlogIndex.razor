@page "/blogs"
@page "/blogs/{type}/{page:int}"
@page "/blogs/{type}"
@page "/blogs/{page:int}"

@using _12thMorning.Data

@implements IDisposable

@inject BlogService BlogDataService
@inject IJSRuntime JSRuntime
@inject Microsoft.AspNetCore.Components.NavigationManager NavManager

<base href="~/" />
<h3>The Blogs</h3>

<BlogPaging Page="@Page" Type="@Type" Count="@count"/>

@foreach (var blog in blogs) {
    <h1><a href="blog/@blog.PostNumber">@blog.Title</a></h1>
    <small><small>@blog.DateAdded.ToString("dd MMMM yyyy")</small></small>
    <div>
        @((MarkupString)BlogDataService.GetPreviewPost(blog.Post))
    </div>
    <br />
}

<BlogPaging Page="@Page" Type="@Type" Count="@count" />

@code {
    [Parameter]
    public string Type { get; set; }
    [Parameter]
    public int Page { get; set; }
    private List<Blog> blogs;
    private int size = 10;
    private List<int> pages;
    private int count;

    private async void OnLocationChanges(object sender, LocationChangedEventArgs e) => await Update();

    private async Task Update() {
        count = BlogDataService.GetPages(size, Type);
        pages = new List<int>();
        for (int x = 1; x <= count; x++) {
            pages.Add(x);
        }
        blogs = await BlogDataService.GetBlogList(Page, size, Type);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync() {
        await Update();
        NavManager.LocationChanged += OnLocationChanges;
    }

    public void Dispose() {
        NavManager.LocationChanged -= OnLocationChanges;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            await JSRuntime.InvokeAsync<string>("PR.prettyPrint");
        }
    }

}
