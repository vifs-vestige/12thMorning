@page "/queslar/api"
@page "/queslar"
@inherits ApiCheck
@inject QueslarService Queslar
@using _12thMorning.Models.Queslar.Player

<h3>Api <small> (Settings > Api [api key is only saved localy])</small></h3>
<BSFormGroup>
    <BSLabel>API Key </BSLabel>
    @if (Valid) {
        <BSBadge Color="Color.Success">Key Valid</BSBadge>
    }
    else {
        <BSBadge Color="Color.Danger">Key Invalid</BSBadge>
    }
    <BSBasicInput ID="apiKey" @bind-Value="ApiKey" InputType="InputType.Text" />
</BSFormGroup>
<BSButton ButtonType="ButtonType.Submit" OnClick="@Submit">
    Test
</BSButton>
<BSButton ButtonType="ButtonType.Submit" OnClick="@Unload">
    Unload
</BSButton>
<br />
<BSButton ButtonType="ButtonType.Submit" OnClick="@AddServer" IsDisabled="@CantAdd">
    Add To Server
</BSButton>
<BSButton ButtonType="ButtonType.Submit" OnClick="@RemoveServer" IsDisabled="@CantRemove">
    Remove From Server
</BSButton>
<p>@dump</p>

@code {
    private string ApiKey = "";
    private bool Valid = false;
    public string dump;
    private bool CantAdd = true;
    private bool CantRemove = true;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            await CheckInfo();
            GetInfo();
        }
    }

    private void AddServer() {
        Queslar.AddToServer();
        CantAdd = true;
        CantRemove = false;
        StateHasChanged();
    }

    private void RemoveServer() {
        Queslar.RemoveFromServer();
        CantAdd = false;
        CantRemove = true;
        StateHasChanged();
    }

    private async void Submit() {
        var info = await Queslar.Update<Full>(ApiKey);
        if (info != null) {
            await localStorage.SetItemAsync<string>(Queslar.LocalApiKey, ApiKey);
            dump = System.Text.Json.JsonSerializer.Serialize(info);
            GetInfo();
            var onServer = Queslar.CheckIfInServer();
            CantRemove = !onServer;
            CantAdd = onServer;
        }
        else {
            CantRemove = true;
            CantAdd = true;
            ApiKey = "";
            Valid = false;
        }
        StateHasChanged();
    }

    private void GetInfo() {
        ApiKey = Queslar.ApiKey;
        Valid = Queslar.Valid;
        StateHasChanged();
    }

    private async void Unload() {
        await localStorage.ClearAsync();
        Queslar.ApiKey = "";

        GetInfo();
    }

}
