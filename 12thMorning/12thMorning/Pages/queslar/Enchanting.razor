@*@page "/queslar/enchanting"
@page "/queslar/enchanting/{player}/{cost:int}"
@page "/queslar/enchanting/{avg:double}/{cost:int}"
@page "/queslar/enchanting/{avg:double}"*@
@layout QueslarLayout
@inject QueslarService Queslar
@inject IJSRuntime JSRuntime
@using System.ComponentModel.DataAnnotations
@using _12thMorning.Models.Queslar.Enchanting

<BSForm Model="@EnchantForm" OnValidSubmit="@Submit">
    <DataAnnotationsValidator />
    <BSRow>
        <BSCol SM="3">
            <BSFormGroup>
                <BSLabel>enchant level</BSLabel>
                <BSInput @bind-Value="EnchantForm.Level" InputType="InputType.Number" />
                <BSFormFeedback For="@(() => EnchantForm.Level)" />
            </BSFormGroup>
        </BSCol>
        <BSCol SM="3">
            <BSFormGroup>
                <BSLabel>enchanting avg</BSLabel>
                <BSInput @bind-Value="EnchantForm.Avg" InputType="InputType.Text" ValidateOnChange="true" />
                <BSFormFeedback For="@(() => EnchantForm.Avg)" />
            </BSFormGroup>
        </BSCol>
        <BSCol SM="3">
            <BSFormGroup>
                <BSLabel>cost</BSLabel>
                <BSInput @bind-Value="EnchantForm.Cost" InputType="InputType.Text" />
                <BSFormFeedback For="@(() => EnchantForm.Cost)" />
            </BSFormGroup>
        </BSCol>
    </BSRow>
    <BSRow>
        <BSCol>
            <BSButton ButtonType="ButtonType.Submit">calculate</BSButton>
        </BSCol>
    </BSRow>
</BSForm>
@if (EnchantInfo != null) {
    <br/>
    <BSRow>
        @foreach (var x in EnchantInfo) {
            <BSCol SM="3" Class="border-top border-bottom">
                @if (EnchantInfo.IndexOf(x) == 1) {
                    <h4>lowest level</h4>
                }
                else if (EnchantInfo.IndexOf(x) == 2) {
                    <h4>next level</h4>
                }
                else {
                    <h4>current level</h4>
                }
                average enchant for level <b>@x.Level.ToString("N0")</b><br />
                standard: <b>(@(x.OwnershipValue.ToString("N3"))%)</b> @(x.Value.ToString("N3"))%<br />
                actions: <b>(@(x.OwnershipActionValue.ToString("N0")))</b> @(x.ActionValue.ToString("N0"))<br />
                speed: <b>(@(x.OwnershipSpeedValue.ToString("N3"))%)</b> @(x.SpeedValue.ToString("N3"))%<br /><br />
                @if (x.RelicCost != 0) {
                    <text>relic cost: <b>@x.RelicCost.ToString("N0")</b> </text><br />
                }
                res cost: <b>@x.ResCost.ToString("N0")</b> <br />
                action count: <b>@x.ActionCount.ToString("N0")</b>
                <br/>
            </BSCol>
        }
    </BSRow>
}

@code {
    [Parameter]
    public double Avg { get; set; }
    [Parameter]
    public int Cost { get; set; }
    [Parameter]
    public string Player { get; set; }
    private List<EnchantServiceInfo> EnchantInfo;
    private FormsModel EnchantForm = new FormsModel();

    protected override async void OnInitialized() {
        if (Player != null) {
            Avg = await Queslar.GetPlayerForEnchantingService(Player);
        }

        if (Avg != 0) {
            EnchantForm.Avg = Avg + "";
        }
        if (Cost != 0) {
            EnchantForm.Cost = Cost + "";
        }
    }

    private void Submit() {
        EnchantInfo = Queslar.CalcEnchantingInfo(EnchantForm.Avg, EnchantForm.Level, EnchantForm.Cost);
        StateHasChanged();
    }

    public class FormsModel {
        [Range(0.0, Double.MaxValue, ErrorMessage = "enter a number")]
        [Required(ErrorMessage = "required")]
        public string Avg { get; set; }
        [Range(0, int.MaxValue, ErrorMessage = "enter a number")]
        [Required(ErrorMessage = "required")]
        public string Level { get; set; }
        [Range(0, int.MaxValue, ErrorMessage = "enter a number")]
        public string Cost { get; set; }
    }
}