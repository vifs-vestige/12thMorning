@page "/queslar/enchanting"
@page "/queslar/enchanting/{avg:decimal}"
@page "/queslar/enchanting/{avg:decimal}/{cost:int}"
@layout QueslarLayout
@inject QueslarService Queslar
@inject IJSRuntime JSRuntime
@using System.ComponentModel.DataAnnotations
@using _12thMorning.Models.Queslar.Enchanting

<BSForm Model="@EnchantForm" OnValidSubmit="@Submit">
    <DataAnnotationsValidator />
    <BSRow>
        <BSCol SM="3">
            <BSFormGroup>
                <BSLabel>enchanting avg</BSLabel>
                <BSInput @bind-Value="EnchantForm.Avg" InputType="InputType.Text" ValidateOnChange="true" />
                <BSFormFeedback For="@(() => EnchantForm.Avg)" />
            </BSFormGroup>
        </BSCol>
        <BSCol SM="3">
            <BSFormGroup>
                <BSLabel>enchant level</BSLabel>
                <BSInput @bind-Value="EnchantForm.Level" InputType="InputType.Number" />
                <BSFormFeedback For="@(() => EnchantForm.Level)" />
            </BSFormGroup>
        </BSCol>
        <BSCol SM="3">
            <BSFormGroup>
                <BSLabel>cost</BSLabel>
                <BSInput @bind-Value="EnchantForm.Cost" InputType="InputType.Text" />
                <BSFormFeedback For="@(() => EnchantForm.Cost)" />
            </BSFormGroup>
        </BSCol>
    </BSRow>
    <BSRow>
        <BSCol>
            <BSButton ButtonType="ButtonType.Submit">calculate</BSButton>
        </BSCol>
    </BSRow>
</BSForm>
    @if (EnchantInfo != null) {
<BSRow>
    @foreach (var x in EnchantInfo) {
    <BSCol>
        @if (EnchantInfo.IndexOf(x) == 1) {
            <b>lowest level for action count</b><br />
        } else if (EnchantInfo.IndexOf(x) == 2) {
        <b>next level for action count</b><br />
        } else {
            <b>entered level</b><br/>
        }
        <br />
        average enchant for level <b>@x.Level</b><br />
        (@(x.OwnershipValue)%) @(x.Value)%<br />
        (@(x.OwnershipActionValue)) @(x.ActionValue) for actions<br />
        (@(x.OwnershipSpeedValue)%) @(x.SpeedValue)% for speed<br /><br />
        @if (x.RelicCost != 0) {
            <text>relic cost: <b>@x.RelicCost</b> </text><br />
        }
        res cost: <b>@x.ResCost</b> <br />
        action count: <b>@x.ActionCount</b>
    </BSCol>
    }
</BSRow>
    }

@code {
        [Parameter]
        public decimal Avg { get; set; }
        [Parameter]
        public int Cost { get; set; }
    private List<EnchantServiceInfo> EnchantInfo;
    private FormsModel EnchantForm = new FormsModel();

    protected override void OnInitialized() {
        if (Avg != 0) {
            EnchantForm.Avg = Avg + "";
        }
        if (Cost != 0) {
            EnchantForm.Cost = Cost + "";
        }
    }

    private void Submit() {
        EnchantInfo = Queslar.CalcEnchantingInfo(EnchantForm.Avg, EnchantForm.Level, EnchantForm.Cost);
        StateHasChanged();
    }

    public class FormsModel {
        [Range(0.0, Double.MaxValue, ErrorMessage = "enter a number")]
        [Required(ErrorMessage = "required")]
        public string Avg { get; set; }
        [Range(0, int.MaxValue, ErrorMessage = "enter a number")]
        [Required(ErrorMessage = "required")]
        public string Level { get; set; }
        [Range(0, int.MaxValue, ErrorMessage = "enter a number")]
        public string Cost { get; set; }
    }
}