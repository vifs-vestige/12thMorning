@page "/queslar/partners"
@inherits ApiCheck
@using System.Net.Http
@inject QueslarService Queslar
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using _12thMorning.Models.Queslar.Player
@using _12thMorning.Models.Queslar 

@name
@if (PlayerInfo != null) {
    <BSButton OnClick="Refresh">Refresh</BSButton>
    <span><small> you can support the creator of this tool at "VifsVestige" enchanting service</small></span>

    <br/>
    <BSButton Color="Color.Primary" OnClick="@(e => toggleDropDowns(e, "current"))" Class="dropdown">current partners <i class="oi oi-chevron-@(Toggles["current"]? "bottom" : "left")"/></BSButton>
    <BSCollapse IsOpen="@Toggles["current"]">
        <BSTable IsStriped="true" IsSmall="true" IsBordered="true">
            <BSTableHead TableHeadType="TableHeadType.Dark">
                <tr>
                    <th scope="col">name</th>
                    <th scope="col">res</th>
                    <th scope="col">stat</th>
                    <th scope="col">player stat</th>
                    <th scope="col">speed</th>
                    <th scope="col">int</th>
                    <th scope="col">total stats</th>
                    <th scope="col">res</th>
                    <th scope="col">res/hour</th>
                    <th scope="col">Total Spent</th>
                </tr>
            </BSTableHead>
            <tbody>
                @foreach (var partner in PlayerInfo.PartnerInfo.PartnerInfos.Values) {
                    <tr>
                        <th scope="row">@partner.BaseInfo.name</th>
                        <td>
                            <BSDropdown>
                                <BSDropdownToggle>@partner.Display</BSDropdownToggle>
                                <BSDropdownMenu>
                                    @foreach (string resType in Enum.GetNames(typeof(ResTypes))) {
                                        <BSDropdownItem @onclick="@(e => OnClick(e, resType, partner.BaseInfo.id))" Href="javascript:void(0);">@resType</BSDropdownItem>
                                    }
                                </BSDropdownMenu>
                            </BSDropdown>
                        </td>
                        <td>@partner.Stats.ToString("N0")</td>
                        <td><BSBasicInput @bind-Value="partner.PlayerStat" @onkeyup="partner.UpdateStats" InputType="InputType.Number" /></td>
                        <td>@partner.Current.Speed / @partner.Current.Seconds</td>
                        <td>@partner.Current.Intelligence / @partner.Current.IntPercent.ToString("P2")</td>
                        <td>@partner.Current.TotalStats.ToString("N0")</td>
                        <td>@partner.Current.ResPre</td>
                        <td>@partner.Current.ResPerHourPre.ToString("N0")</td>
                        <td>@partner.New.TotalSpent.ToString("N0")</td>
                    </tr>
                }
                <tr>
                    <th scope="row">Total</th>
                    <th colspan="7"></th>
                    <th>@PlayerInfo.PartnerInfo.CurrentResHour.ToString("N0")</th>
                    <th>@PlayerInfo.PartnerInfo.CurrentPrice.ToString("N0")</th>
                </tr>

            </tbody>
        </BSTable>
    </BSCollapse>
    <br/>
    <BSButton Color="Color.Primary" OnClick="@(e => toggleDropDowns(e, "new"))">new partners <i class="oi oi-chevron-@(Toggles["new"]? "bottom" : "left")" /></BSButton>
    <BSCollapse IsOpen="@Toggles["new"]">
        <BSTable IsStriped="true" IsSmall="true" IsBordered="true">
            <BSTableHead TableHeadType="TableHeadType.Dark">
                <tr>
                    <th scope="col">name</th>
                    <th scope="col">speed</th>
                    <th scope="col">int</th>
                    <th scope="col">total stats</th>
                    <th scope="col">res</th>
                    <th scope="col">res/hour</th>
                    <th scope="col">Total Spent</th>
                </tr>
            </BSTableHead>
            <tbody>
                @foreach (var partner in PlayerInfo.PartnerInfo.PartnerInfos.Values) {
                <tr>
                    <th scope="row">@(partner.BaseInfo.name) (@partner.Display)</th>
                    <td>
                        <div class="input-group">
                            <input type="number" class="form-control" @bind-value="partner.New.Speed" @onkeyup="PlayerInfo.PartnerInfo.updateNew" tabindex="1" />
                            <div class="input-group-append">
                                <div class="input-group-text">@partner.New.Seconds.ToString("N2")</div>
                            </div>
                        </div>
                    </td>
                    <td>
                        <div class="input-group">
                            <input type="number" class="form-control" @bind-value="partner.New.Intelligence" @onkeyup="PlayerInfo.PartnerInfo.updateNew" tabindex="2" />
                            <div class="input-group-append">
                                <div class="input-group-text">@partner.New.IntPercent.ToString("N2")%</div>
                            </div>
                        </div>
                    </td>
                    <td>@partner.New.TotalStats.ToString("N0")</td>
                    <td>@partner.New.ResPre.ToString("N0")</td>
                    <td>@partner.New.ResPerHourPre.ToString("N0")</td>
                    <td>@partner.New.TotalSpent.ToString("N0")</td>
                </tr>
                }
            <tr>
                <th scope="col">Total</th>
                <th colspan="4"></th>
                <th>@PlayerInfo.PartnerInfo.NewResHour.ToString("N0")</th>
                <th>@PlayerInfo.PartnerInfo.NewPrice.ToString("N0")</th>
            </tr>

            </tbody>
        </BSTable>
        <span>
            Current Total (@PlayerInfo.PartnerInfo.CurrentPrice.ToString("N0")) - New Total(@PlayerInfo.PartnerInfo.NewPrice.ToString("N0")) - Bound Gold (@PlayerInfo.BaseInfo.currency.shattered_partner_gold.ToString("N0")) =
            Needed <b>@((PlayerInfo.PartnerInfo.NewPrice - PlayerInfo.PartnerInfo.CurrentPrice - PlayerInfo.BaseInfo.currency.shattered_partner_gold).ToString("N0"))</b>
        </span>
    </BSCollapse>
    <br/>
    <BSButton Color="Color.Primary" OnClick="@(e => toggleDropDowns(e, "boost"))">boosts <i class="oi oi-chevron-@(Toggles["boost"]? "bottom" : "left")" /></BSButton>
    <BSCollapse IsOpen="@Toggles["boost"]">
        <BSTable IsStriped="true" IsSmall="true" IsBordered="true">
            <BSTableHead TableHeadType="TableHeadType.Dark">
                <tr>
                    <th scope="col">name</th>
                    <th scope="col">relic boost</th>
                    <th scope="col">house</th>
                    <th scope="col">enchants</th>
                    <th scope="col">village boost</th>
                    <th scope="col">vip</th>
                    <th scope="col">level</th>
                    <th scope="col">kingdom</th>
                    <th scope="col">tax</th>
                    <th scope="col">res</th>
                    <th scope="col">after tax</th>
                    <th scope="col">res/hour</th>
                </tr>
            </BSTableHead>
            <tbody>
                @foreach (var partner in PlayerInfo.PartnerInfo.PartnerInfos.Values) {
                <tr>
                    <th scope="row">@(partner.BaseInfo.name) (@partner.Display)</th>
                    <td>
                        <div class="input-group">
                            <input type="number" class="form-control" @bind-value="partner.Boost" @onkeyup="PlayerInfo.PartnerInfo.UpdateBoosts" tabindex="3" />
                            <div class="input-group-append">
                                <div class="input-group-text">@((partner.Boost * .025).ToString("N2"))%</div>
                            </div>
                        </div>
                    </td>
                    <td>
                        <div class="input-group">
                            <input type="number" class="form-control" @bind-value="partner.HouseBoost" @onkeyup="PlayerInfo.PartnerInfo.UpdateBoosts" tabindex="4" />
                            <div class="input-group-append">
                                <div class="input-group-text">@(partner.BoostedHouseBoost.ToString("N0"))%</div>
                            </div>
                        </div>
                    </td>
                    <td>@partner.EnchantBoost</td>
                    <td>
                        <div class="input-group">
                            <input type="number" class="form-control" @bind-value="PlayerInfo.BaseInfo.village.boosts.mill" @onkeyup="PlayerInfo.PartnerInfo.UpdateBoosts" tabindex="5" />
                            <div class="input-group-append">
                                <div class="input-group-text">@(partner.BoostedVillageBoost.ToString("N0"))%</div>
                            </div>
                        </div>
                    </td>
                    <td><BSBasicInput Class="ml-auto" @bind-Value="PlayerInfo.Vip" @onchange="PlayerInfo.PartnerInfo.UpdateBoosts" InputType="InputType.Checkbox" /></td>
                    <td>@partner.Level</td>
                    <td>@PlayerInfo.PartnerInfo.KingdomBonus</td>
                    <td>
                        <div class="input-group">
                            <input type="number" class="form-control" @bind-value="PlayerInfo.PartnerInfo.Tax" @oninput="@(e => TaxUpdate(e))"  tabindex="6" />
                            <div class="input-group-append">
                                <div class="input-group-text">@partner.Taxed</div>
                            </div>
                        </div>
                    </td>
                    <td>@partner.Res.ToString("N2") (@Math.Round(partner.Res).ToString("N0"))</td>
                    <td>@partner.ResPostTax.ToString("N0")</td>
                    <td>@partner.ResHour.ToString("N0")</td>
                </tr>
                }
            </tbody>
        </BSTable>
    </BSCollapse>
    <br/>
    <BSButton Color="Color.Primary" OnClick="@(e => toggleDropDowns(e, "final"))">final <i class="oi oi-chevron-@(Toggles["final"]? "bottom" : "left")" /></BSButton>
    <BSCollapse IsOpen="@Toggles["final"]">
        <BSTable IsStriped="true" IsSmall="true" IsBordered="true">
            <BSTableHead TableHeadType="TableHeadType.Dark">
                <tr>
                    <th scope="col">type</th>
                    <th>pet food</th>
                    <th>taxed/hour</th>
                    <th>final/hour</th>
                    <th>taxed/day</th>
                    <th>final/day</th>
                </tr>
            </BSTableHead>
            <tbody>
                @foreach (var partner in PlayerInfo.PartnerInfo.FinalPartners) {
                    <tr>
                        <th scope="auto">@partner.Key</th>
                        <td>
                            <div class="input-group">
                                <input type="number" class="form-control" @bind-value="partner.Value.PetFood" @onkeyup="PlayerInfo.PartnerInfo.UpdateFinals" />
                                <div class="input-group-append">
                                    <div class="input-group-text">@partner.Value.RealPetFood - @partner.Value.PetFoodPerHour.ToString("N0")</div>
                                </div>
                            </div>
                        </td>
                        <td>@partner.Value.TaxedPerHour.ToString("N0")</td>
                        <td>@partner.Value.FinalPerHour.ToString("N0")</td>
                        <td>@((partner.Value.TaxedPerHour * 24).ToString("N0"))</td>
                        <td>@((partner.Value.FinalPerHour * 24).ToString("N0"))</td>
                    </tr>
                }
                <tr>
                    <th scope="col">Total</th>
                    <th>@PlayerInfo.PartnerInfo.FinalTotals["petFood"].ToString("N0")</th>
                    <th>@PlayerInfo.PartnerInfo.FinalTotals["taxed"].ToString("N0")</th>
                    <th>@PlayerInfo.PartnerInfo.FinalTotals["final"].ToString("N0")</th>
                    <th>@((PlayerInfo.PartnerInfo.FinalTotals["taxed"] * 24).ToString("N0"))</th>
                    <th>@((PlayerInfo.PartnerInfo.FinalTotals["final"] * 24).ToString("N0"))</th>
                </tr>
            </tbody>
        </BSTable>
    </BSCollapse>
}

@code {
    public string name;
    Dictionary<string, bool> Toggles = new Dictionary<string, bool> {
                { "current", true },
                { "new", true },
                { "boost", true },
                { "final", true },
            };

    protected async void TaxUpdate(ChangeEventArgs e) {
        var tax = Queslar.UpdateTax(e.Value.ToString());
        PlayerInfo.PartnerInfo.Tax = tax;
        PlayerInfo.PartnerInfo.UpdateBoosts();
        await localStorage.SetItemAsync("Tax", tax);
    }

    protected void OnClick(MouseEventArgs e, string resType, int partnerId) {
        PlayerInfo.PartnerInfo.SetRes(partnerId, (ResTypes)Enum.Parse(typeof(ResTypes), resType));
    }

    protected async void Refresh(MouseEventArgs e) {
        await Queslar.Update<Full>();
        PlayerInfo = Queslar.GetFullWrapper();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            await base.OnAfterRenderAsync(firstRender);
            if (Queslar.Values.ContainsKey(typeof(Full)) && Queslar.Values[typeof(Full)] != null) {
                checkTax();
                var temp = await localStorage.GetItemAsync<Dictionary<string, bool>>("Toggles");
                if (temp != null) {
                    Toggles = temp;
                }
                StateHasChanged();
            }
        }
    }

    private async void checkTax() {
        var tax = await localStorage.GetItemAsync<string>("Tax");
        if (tax != null && tax != "" && tax != "0") {
            PlayerInfo.PartnerInfo.Tax = Queslar.UpdateTax(tax);
            PlayerInfo.PartnerInfo.UpdateBoosts();
        }
    }

    private async void toggleDropDowns(MouseEventArgs e, string type) {
        Toggles[type] = !Toggles[type];
        await localStorage.SetItemAsync("Toggles", Toggles);
    }
}
