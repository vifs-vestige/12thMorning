@implements IDisposable

<BSNavbar IsExpand="true" IsDark="true" Color="Color.Dark">
    <BSNavbarBrand Href="/">12th morning</BSNavbarBrand>
    <BSNavbarToggler @onclick="OnClick2" />
    <BSCollapse IsOpen="@IsOpen2" IsNavbar="true" IsOpenChanged="OpenChanged">
        <BSNav Class="mr-auto" IsList="true" IsPills="true" IsNavbar="true">
            <BSNavItem>
                <BSNavLink Class="btn btn-outline-info mx-2" href="/blogs">
                    blog
                </BSNavLink>
            </BSNavItem>
            <BSNavItem>
                <BSNavLink Class="btn btn-outline-info mx-2" href="/info">
                    about
                </BSNavLink>
            </BSNavItem>
            <AuthorizeView Roles="admin">
                    <BSNavItem>
                    <BSNavLink Class="btn btn-outline-info mx-2" href="/blogupdate">
                        blog update
                    </BSNavLink>
                </BSNavItem>
            </AuthorizeView>
            @*@if (Startup.IsDev)
            {
                <BSNavItem>
                    <BSNavLink Class="btn btn-outline-info mx-2" href="/blogupdate">
                        blog update
                    </BSNavLink>
                </BSNavItem>
            }*@
            <BSNavItem>
                <AuthorizeView Roles="admin">
                    <Authorized>
                <BSNavLink Class="btn btn-outline-info mx-2" href="/identity/account/logout">
                    logout
                </BSNavLink>
                    </Authorized>
                    <NotAuthorized>
                <BSNavLink Class="btn btn-outline-info mx-2" href="/identity/account/login">
                    login
                </BSNavLink>
                    </NotAuthorized>
                </AuthorizeView>
            </BSNavItem>
        </BSNav>
    </BSCollapse>
</BSNavbar>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthStateTask{ get; set; }
    protected bool IsOpen { get; set; } = false;
    private bool IsOpen2 { get; set; } = false;

    protected void OnClick(MouseEventArgs e)
    {
        IsOpen = !IsOpen;
        StateHasChanged();
    }

    protected void OnMonthClick(MouseEventArgs e)
    {
        State.OpenMonths();
    }

    protected override void OnInitialized()
    {
        State.Change += StateHasChanged;
    }

    public void Dispose()
    {
        State.Change -= StateHasChanged;
    }

    void OpenChanged(bool e)
    {
        IsOpen2 = e;
        StateHasChanged();
    }

    private void OnClick2(MouseEventArgs e)
    {
        IsOpen2 = !IsOpen2;
        StateHasChanged();
    }

}
